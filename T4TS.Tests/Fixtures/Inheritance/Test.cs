using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using T4TS.Example.Models;
using T4TS.Tests.Fixtures.Basic;
using T4TS.Tests.Utils;

namespace T4TS.Tests.Fixtures.Inheritance
{
    [TestClass]
    public class Test
    {
        [TestMethod]
        public void InheritanceModelHasExpectedOutput()
        {
            // Generated output
            var solution = DTETransformer.BuildDteSolution(
                typeof(InheritanceModel),
                typeof(ModelFromDifferentProject),
                typeof(BasicModel)
            );

            var settings = new Settings();
            var generator = new CodeTraverser(solution, settings);
            var data = generator.GetAllInterfaces().ToList();
            var generatedOutput = OutputFormatter.GetOutput(data, settings);

            const string expectedOutput =
@"
/****************************************************************************
  Generated by T4TS.tt - don't make any changes in this file
****************************************************************************/

declare module External {
    /** Generated from T4TS.Example.Models.ModelFromDifferentProject **/
    export interface ModelFromDifferentProject {
        Id: number;
    }
}

declare module T4TS {
    /** Generated from T4TS.Tests.Fixtures.Inheritance.InheritanceModel **/
    export interface InheritanceModel {
        Basic: T4TS.BasicModel;
        External: External.ModelFromDifferentProject;
    }
    /** Generated from T4TS.Tests.Fixtures.Basic.BasicModel **/
    export interface BasicModel {
        MyProperty: number;
    }
}
";

            Assert.AreEqual(Normalize(expectedOutput), Normalize(generatedOutput));
        }

        private string Normalize(string input)
        {
            return Regex.Replace(input, @"\r\n|\n\r|\n|\r", "\n").Trim();
        }
    }
}
